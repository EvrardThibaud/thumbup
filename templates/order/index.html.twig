{% extends 'base.html.twig' %}
{% block title %}Orders{% endblock %}

{% block body %}
  <div class="d-flex align-items-center justify-content-between mb-3">
    <h1 class="h4 m-0">ðŸ§¾ Orders</h1>
    <a class="btn btn-sm btn-primary rounded-1" href="{{ path('app_order_new') }}">+ New order</a>
  </div>

  {# Filters #}
<div class="card bg-dark border-0 p-3 mb-3">
  <div class="d-flex justify-content-between align-items-center mb-2">
    <div>
      <h2 class="h6 m-0">Filters</h2>
      <div class="small text-secondary">Narrow results by text, client, status, and dates.</div>
    </div>
    {% set route = app.request.attributes.get('_route') %}
    {% set qs = app.request.query.all %}
    <div class="d-flex gap-2">
      <a href="{{ path(route) }}" class="btn btn-outline-light btn-sm rounded-1">Reset</a>
      <a class="btn btn-secondary btn-sm rounded-1" href="{{ path('app_order_export', app.request.query.all) }}">Export CSV</a>
    </div>
  </div>

  {{ form_start(filters, { attr: { class: 'row g-3 align-items-end' } }) }}

    <div class="col-md-3">
      {{ form_row(filters.q, {
        label: 'Search',
        label_attr: { class: 'form-label mb-1 small text-secondary' },
        attr: {
          class: 'form-control form-control-sm bg-dark text-white border-secondary',
          placeholder: 'Title containsâ€¦'
        }
      }) }}
    </div>

    <div class="col-md-3">
      {% if is_client %}
        {{ form_label(filters.client, 'Client', { label_attr: { class: 'form-label mb-1 small text-secondary' } }) }}
        {{ form_widget(filters.client, {
          attr: {
            disabled: true
          }
        }) }}
        {% set boundEntity = filters.client.vars.data %}
        {% set boundId = boundEntity ? boundEntity.id : (filters.client.vars.value ?? (app.user and app.user.client ? app.user.client.id : '')) %}
        <input type="hidden" name="{{ filters.client.vars.full_name }}" value="{{ boundId }}">
      {% else %}
        {{ form_row(filters.client, {
          label: 'Client',
          label_attr: { class: 'form-label mb-1 small text-secondary' },
        }) }}
      {% endif %}
    </div>

    <div class="col-md-2">
      {{ form_row(filters.status, {
        label: 'Status',
        label_attr: { class: 'form-label mb-1 small text-secondary' },
        attr: { class: 'form-select form-select-sm bg-dark text-white border-secondary' }
      }) }}
    </div>

    <div class="col-md-2">
      {{ form_row(filters.from, {
        label: 'From',
        label_attr: { class: 'form-label mb-1 small text-secondary' },
        attr: { class: 'form-control form-control-sm bg-dark text-white border-secondary' }
      }) }}
    </div>

    <div class="col-md-2">
      {{ form_row(filters.to, {
        label: 'To',
        label_attr: { class: 'form-label mb-1 small text-secondary' },
        attr: { class: 'form-control form-control-sm bg-dark text-white border-secondary' }
      }) }}
    </div>

    <div class="col-md-2">
        {{ form_row(filters.paid, {
            label: 'Paid',
            label_attr: { class: 'form-label mb-1 small text-secondary' },
        attr: { class: 'form-select form-select-sm bg-dark text-white border-secondary' }
        }) }}
    </div>

    <div class="col-12">
      <button class="btn btn-primary btn-sm rounded-1">Apply filters</button>
    </div>

  {{ form_end(filters) }}
</div>



  {# PrÃ©pare tri: route + querystring + macro #}
  {% set route = app.request.attributes.get('_route') %}
  {% set qs = app.request.query.all %}

  {% macro sortLink(label, field, currentSort, currentDir, route, qs) %}
    {%- set dir = (currentSort == field and currentDir == 'ASC') ? 'DESC' : 'ASC' -%}
    {%- set params = qs|merge({'sort': field, 'dir': dir, 'page': 1}) -%}
    <a class="link-light link-underline-opacity-0" href="{{ path(route, params) }}">
      {{ label }}
      {% if currentSort == field %}
        <span class="text-secondary">{{ currentDir == 'ASC' ? 'â–²' : 'â–¼' }}</span>
      {% endif %}
    </a>
  {% endmacro %}
  {% import _self as S %}

    {% set start = total == 0 ? 0 : ((page - 1) * limit) + 1 %}
    {% set end = (page * limit) > total ? total : (page * limit) %}
    <p class="text-secondary small mb-2">
    Showing <strong>{{ start }}</strong>â€“<strong>{{ end }}</strong> of <strong>{{ total }}</strong>
    </p>

  {# Table #}
  <div class="card bg-dark border-0">
    <div class="table-responsive">
      {# templates/order/_table.html.twig (bloc tableau complet, avec colonne Paid + nouveaux statuts) #}
        <table class="table table-dark table-hover align-middle mb-0">
        <thead class="small text-secondary">
            <tr>
            <th>{{ S.sortLink('ID', 'id', sort, dir, route, qs) }}</th>
            <th>{{ S.sortLink('Title', 'title', sort, dir, route, qs) }}</th>
            <th>{{ S.sortLink('Client', 'client', sort, dir, route, qs) }}</th>
            <th style="width:28ch">Brief</th>
            <th class="text-nowrap">{{ S.sortLink('Price', 'price', sort, dir, route, qs) }}</th>
            <th>{{ S.sortLink('Status', 'status', sort, dir, route, qs) }}</th>
            <th>Paid</th>
            <th>{{ S.sortLink('Due', 'dueAt', sort, dir, route, qs) }}</th>
            <th>{{ S.sortLink('Updated', 'updatedAt', sort, dir, route, qs) }}</th>
            <th></th>
            </tr>
        </thead>

        <tbody>
        {% for order in orders %}
            {% set s = order.status.value %}
            {# Role-aware label for ACCEPTED: Admin sees "To do", Client sees "Accepted" #}
            {% set statusLabelMap = {
            'created':  'Created',
            'refused':  'Refused',
            'canceled': 'Canceled',
            'accepted': is_granted('ROLE_ADMIN') ? 'To do' : 'Accepted',
            'doing':    'Doing',
            'delivered':'Delivered'
            } %}
            {% set statusColorMap = {
            'created':  'secondary',
            'refused':  'danger',
            'canceled': 'dark',
            'accepted': 'warning',
            'doing':    'info',
            'delivered':'primary'
            } %}
            {% set label = statusLabelMap[s] ?? s %}
            {% set color = statusColorMap[s] ?? 'secondary' %}

            <tr>
            <td class="text-secondary">#{{ order.id }}</td>
            <td class="fw-medium" style="max-width:16ch">{{ order.title }}</td>
            <td>{{ order.client ? order.client.name : 'â€”' }}</td>
            <td class="text-secondary text-truncate" style="max-width:16ch">{{ order.brief }}</td>
            <td>{{ (order.price / 100)|number_format(2, ',', ' ') }} â‚¬</td>

            <td><span class="badge text-bg-{{ color }} rounded-1">{{ label }}</span></td>

            <td>
                {% if order.paid %}
                <span class="badge text-bg-success rounded-1">Paid</span>
                {% else %}
                <span class="badge text-bg-warning rounded-1">Unpaid</span>
                {% endif %}
            </td>

            <td>{{ order.dueAt ? order.dueAt|date('Y-m-d H:i') : 'â€”' }}</td>
            <td class="text-secondary">{{ order.updatedAt ? order.updatedAt|date('Y-m-d H:i') : 'â€”' }}</td>
            <td class="text-end">
                <a class="btn btn-sm btn-outline-light rounded-1" href="{{ path('app_order_show', {'id': order.id}) }}">Open</a>
                {% set backList = app.request.uri %}
                <a class="btn btn-sm btn-outline-light rounded-1" href="{{ path('app_order_edit', {'id': order.id, 'back': backList}) }}">Edit</a>
            </td>
            </tr>
        {% else %}
            <tr><td colspan="10" class="text-secondary">No orders found.</td></tr>
        {% endfor %}
        </tbody>
        </table>

    </div>
  </div>

  {# Pagination #}
  {% set pages = (total / limit)|round(0, 'ceil') %}
  {% if pages > 1 %}
    <nav class="mt-3">
      <ul class="pagination pagination-sm">
        {% set current = page %}
        {% set prev_qs = qs|merge({'page': current-1}) %}
        {% set next_qs = qs|merge({'page': current+1}) %}

        <li class="page-item {{ current <= 1 ? 'disabled' }}">
          <a class="page-link" href="{{ path(route, prev_qs) }}">&laquo;</a>
        </li>

        {% for p in 1..pages %}
          {% set p_qs = qs|merge({'page': p}) %}
          <li class="page-item {{ p == current ? 'active' }}">
            <a class="page-link" href="{{ path(route, p_qs) }}">{{ p }}</a>
          </li>
        {% endfor %}

        <li class="page-item {{ current >= pages ? 'disabled' }}">
          <a class="page-link" href="{{ path(route, next_qs) }}">&raquo;</a>
        </li>
      </ul>
    </nav>
  {% endif %}
{% endblock %}
